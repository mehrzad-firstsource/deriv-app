{"version":3,"sources":["webpack:///./App/Containers/AccountSwitcher/account-switcher-account-list.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-account-wrapper.jsx","webpack:///./App/Containers/RealAccountSignup/upgrade-button.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-add-account-button.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-mobile.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["AccountDisplay","is_virtual","loginid","onClickAccount","setCurrency","selected_loginid","classNames","undefined","currency","account_type","has_balance","CurrencyUtils","CurrencyDisplay","toggleVisibility","is_visible","className","AccountWrapper","propTypes","PropTypes","bool","icon","onClick","UpgradeButton","text","string","toggleSetCurrency","handleClick","has_set_currency","is_currency_required","ButtonAddAccount","oneOfType","toggleAccountsDialog","is_positions_drawer_on","props","history","onClickUpgrade","window","open","active_tab_index","is_demo_deriv_visible","is_demo_dmt5_visible","is_real_dmt5_visible","document","updateMt5LoginList","removeEventListener","total_assets_message_real","demo_accounts","sorted_account_list","account","is_disabled","doSwitch","bind","this","account_loginid","state","has_demo_mt5_upgrade_button","sorted_mt5_list","test","map","login","redirectToMt5Demo","real_accounts","is_real_deriv_visible","filter","has_add_button","can_upgrade","is_mt5_allowed","is_loading_mt5","group","redirectToMt5Real","has_real_mt5_upgrade_button","setWrapperRef","updateAccountTabIndex","localize","a","autoHeight","display","handleLogout","can_change_currency","account_list","slice","a_currency","b_currency","a_is_crypto","isCryptocurrency","b_is_crypto","a_is_fiat","b_is_fiat","real_mt5_accounts","is_upgrade_enabled","accounts","reduce","total","balance","obj_total_balance","amount_real","amount_mt5","React","Component","AccountSwitcher","object","has_any_real_account","has_mt5_login","is_logged_in","mt5_login_list","array","togglePositionsDrawer","toggleSetCurrencyModal","func","client","has_fiat","can_upgrade_to","is_populating_mt5_account_list","landing_company_shortcode","switchAccount","logoutClient","openRealAccountSignup","account_switcher","enableApp","disableApp","AccountSwitcherMobile","children","onClose","title","is_dialog_on","toggleDialog","acc_switcher_disabled_message","enter","enterDone","exit","toggle","AccountInfo"],"mappings":"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","file":"js/core.account-info.f487c77fe939dbd15b82.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Money } from '@deriv/components';\nimport CurrencyUtils from '@deriv/shared/utils/currency';\nimport { Localize, localize } from '@deriv/translations';\nimport { getMT5AccountDisplay } from 'Stores/Helpers/client';\n\nconst AccountList = ({\n    account_type,\n    balance,\n    currency,\n    currency_icon,\n    display_type,\n    has_balance,\n    is_disabled,\n    is_virtual,\n    loginid,\n    onClickAccount,\n    setCurrency,\n    selected_loginid,\n}) => (\n    <>\n        <div\n            id={`dt_${loginid}`}\n            className={classNames('acc-switcher__account', {\n                'acc-switcher__account--selected': loginid === selected_loginid,\n                'acc-switcher__account--disabled': is_disabled,\n            })}\n            onClick={is_disabled ? undefined : onClickAccount}\n        >\n            <span className={'acc-switcher__id'}>\n                <Icon\n                    icon={currency ? currency_icon : 'IcCurrencyUnknown'}\n                    className={'acc-switcher__id-icon'}\n                    size={24}\n                />\n                <span>\n                    {display_type === 'currency' ? (\n                        <CurrencyDisplay is_virtual={is_virtual} currency={currency} />\n                    ) : (\n                        <AccountDisplay account_type={account_type} />\n                    )}\n                    <div className='acc-switcher__loginid-text'>{loginid}</div>\n                </span>\n                {has_balance && (\n                    <span\n                        className={classNames('acc-switcher__balance', {\n                            'acc-switcher__balance--virtual': is_virtual,\n                        })}\n                    >\n                        {currency && (\n                            <Money\n                                currency={currency}\n                                amount={CurrencyUtils.formatMoney(currency, balance, true)}\n                                should_format={false}\n                            />\n                        )}\n                        {!currency && (\n                            <span className='no-currency'>\n                                <Localize i18n_default_text='No currency selected' />\n                            </span>\n                        )}\n                    </span>\n                )}\n            </span>\n        </div>\n        {!currency && selected_loginid === loginid && (\n            <div className={classNames('acc-switcher__account', 'acc-switcher__account-set-currency')}>\n                <div className='acc-switcher__account-set-currency-link' onClick={setCurrency}>\n                    <span>{localize('Select currency')}</span>\n                </div>\n            </div>\n        )}\n    </>\n);\n\nconst CurrencyDisplay = ({ currency, is_virtual }) => {\n    if (is_virtual) {\n        return <Localize i18n_default_text='Demo' />;\n    }\n    if (!currency) {\n        return <Localize i18n_default_text='Real' />;\n    }\n    return currency.toUpperCase();\n};\n\nconst AccountDisplay = ({ account_type }) => <div>{getMT5AccountDisplay(account_type)}</div>;\n\nexport default AccountList;\n","import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@deriv/components';\n\nconst AccountWrapper = ({ children, header, is_visible, toggleVisibility }) => (\n    <React.Fragment>\n        <div className={classNames('acc-switcher', { 'acc-info--show': !is_visible })} onClick={toggleVisibility}>\n            <span className='acc-switcher__list-title'>{header}</span>\n            <Icon icon='IcChevronDown' className='acc-info__select-arrow acc-info__select-arrow--invert' />\n        </div>\n        {is_visible && <React.Fragment>{children}</React.Fragment>}\n    </React.Fragment>\n);\n\nAccountWrapper.propTypes = {\n    children: PropTypes.node,\n    header: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    is_visible: PropTypes.bool,\n    toggleVisibility: PropTypes.func,\n};\n\nexport default AccountWrapper;\n","import { Button } from '@deriv/components';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst UpgradeButton = ({ children, onClick, icon }) => (\n    <div className='acc-switcher__new-account'>\n        <Button id='upgrade-account' onClick={onClick} className='acc-switcher__new-account-link' tertiary icon={icon}>\n            {children}\n        </Button>\n    </div>\n);\n\nUpgradeButton.propTypes = {\n    icon: PropTypes.node,\n    onClick: PropTypes.func,\n    text: PropTypes.string,\n};\n\nexport default UpgradeButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@deriv/components';\nimport UpgradeButton from 'App/Containers/RealAccountSignup/upgrade-button.jsx';\n\nconst ButtonAddAccount = ({ is_currency_required = true, has_set_currency, onClick, text, toggleSetCurrency }) => {\n    const handleClick = has_set_currency ? onClick : toggleSetCurrency;\n    return (\n        <UpgradeButton\n            onClick={is_currency_required ? handleClick : onClick}\n            icon={<Icon icon='IcAddCircle' color='red' size={24} />}\n        >\n            {text}\n        </UpgradeButton>\n    );\n};\n\nButtonAddAccount.propTypes = {\n    has_set_currency: PropTypes.bool,\n    is_currency_required: PropTypes.bool,\n    onClick: PropTypes.func,\n    text: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n};\n\nexport default ButtonAddAccount;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport {\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Icon,\n    Money,\n    Tabs,\n    ThemedScrollbars,\n} from '@deriv/components';\nimport CurrencyUtils from '@deriv/shared/utils/currency';\nimport { localize, Localize } from '@deriv/translations';\nimport { urlFor } from '_common/url';\nimport { connect } from 'Stores/connect';\nimport routes from 'Constants/routes';\nimport { getMT5AccountDisplay } from 'Stores/Helpers/client';\nimport { AccountsItemLoader } from 'App/Components/Layout/Header/Components/Preloader';\nimport AccountList from './account-switcher-account-list.jsx';\nimport AccountWrapper from './account-switcher-account-wrapper.jsx';\nimport ButtonAddAccount from './account-switcher-add-account-button.jsx';\n\nclass AccountSwitcher extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active_tab_index: props.is_virtual ? 1 : 0,\n            is_demo_deriv_visible: true,\n            is_demo_dmt5_visible: true,\n            is_real_deriv_visible: true,\n            is_real_dmt5_visible: true,\n        };\n    }\n\n    toggleVisibility = section => {\n        this.setState({ [`is_${section}_visible`]: !this.state[`is_${section}_visible`] });\n    };\n\n    setWrapperRef = node => {\n        this.wrapper_ref = node;\n    };\n\n    updateAccountTabIndex = index => {\n        this.setState({ active_tab_index: index });\n    };\n\n    handleClickOutside = event => {\n        const accounts_toggle_btn = !event.target.classList.contains('acc-info');\n        if (\n            this.wrapper_ref &&\n            !this.wrapper_ref.contains(event.target) &&\n            this.props.is_visible &&\n            accounts_toggle_btn\n        ) {\n            this.props.toggleAccountsDialog();\n        }\n    };\n\n    handleLogout = () => {\n        this.props.toggleAccountsDialog();\n        if (this.props.is_positions_drawer_on) {\n            this.props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        this.props.logoutClient();\n    };\n\n    redirectToMt5 = account_type => {\n        this.props.toggleAccountsDialog();\n        this.props.history.push(`${routes.mt5}#${account_type}`);\n    };\n\n    redirectToMt5Real = () => {\n        if (!this.props.is_logged_in || this.props.is_mt5_allowed) {\n            this.redirectToMt5('real');\n        } else {\n            window.open(urlFor('user/metatrader', undefined, undefined, true));\n        }\n    };\n\n    redirectToMt5Demo = () => {\n        this.redirectToMt5('demo');\n    };\n\n    setAccountCurrency = () => {\n        this.props.toggleAccountsDialog();\n        this.props.toggleSetCurrencyModal();\n    };\n\n    onClickUpgrade = () => {\n        if (this.props.can_upgrade_to === 'svg') {\n            this.props.openRealAccountSignup();\n        } else {\n            window.open(urlFor('new_account/maltainvestws', undefined, undefined, true));\n        }\n    };\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n        this.props.updateMt5LoginList();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    async doSwitch(loginid) {\n        this.props.toggleAccountsDialog();\n        if (this.props.account_loginid === loginid) return;\n        await this.props.switchAccount(loginid);\n    }\n\n    get can_manage_currency() {\n        return (\n            this.props.can_change_currency ||\n            (!this.props.is_virtual && !this.props.has_fiat && this.props.can_upgrade_to)\n        );\n    }\n\n    get is_real_account_tab() {\n        // Real accounts is always the first tab index based on design\n        return this.state.active_tab_index === 0;\n    }\n\n    get sorted_account_list() {\n        // sort accounts as follows:\n        // top is fiat, then crypto (each alphabetically by currency), then demo\n        return this.props.account_list.slice().sort((a, b) => {\n            const a_currency = this.props.accounts[a.loginid].currency;\n            const b_currency = this.props.accounts[b.loginid].currency;\n            const a_is_crypto = CurrencyUtils.isCryptocurrency(a_currency);\n            const b_is_crypto = CurrencyUtils.isCryptocurrency(b_currency);\n            const a_is_fiat = !a_is_crypto;\n            const b_is_fiat = !b_is_crypto;\n            if (a.is_virtual || b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n                return a_currency < b_currency ? -1 : 1;\n            } else if (a_is_fiat && b_is_crypto) {\n                return -1;\n            }\n            return 1;\n        });\n    }\n\n    get sorted_mt5_list() {\n        // for MT5, standard, advanced, then synthetic indices\n        return this.props.mt5_login_list.slice().sort((a, b) => {\n            if (/demo/.test(a.group) && !/demo/.test(b.group)) {\n                return 1;\n            }\n            if (/demo/.test(b.group) && !/demo/.test(a.group)) {\n                return -1;\n            }\n            if (/vanuatu/.test(a.group)) {\n                return -1;\n            }\n            if (/svg/.test(a.group)) {\n                return 1;\n            }\n            return -1;\n        });\n    }\n\n    get has_real_mt5_upgrade_button() {\n        if (!this.props.mt5_login_list) return false;\n        // TODO: Remove real account advanced string match when Real Account Advanced is enabled\n        const real_mt5_accounts = this.props.mt5_login_list.filter(account =>\n            /^real((?!advanced).)*$/.test(account.group)\n        );\n        return real_mt5_accounts.length < 2;\n    }\n\n    get has_demo_mt5_upgrade_button() {\n        if (!this.props.mt5_login_list) return false;\n        // TODO: Remove demo account advanced string match when Demo Account Advanced is enabled\n        const demo_mt5_accounts = this.props.mt5_login_list.filter(account =>\n            /^demo((?!advanced).)*$/.test(account.group)\n        );\n        return demo_mt5_accounts.length < 2;\n    }\n\n    get has_set_currency() {\n        return this.props.account_list.filter(account => !account.is_virtual).some(account => account.title !== 'Real');\n    }\n\n    get can_upgrade() {\n        return !!(this.props.is_upgrade_enabled && this.props.is_virtual && this.props.can_upgrade_to);\n    }\n\n    get has_add_button() {\n        return this.can_upgrade || this.can_manage_currency;\n    }\n\n    get total_demo_assets() {\n        const vrtc_loginid = this.props.account_list.find(account => account.is_virtual).loginid;\n        const vrtc_balance = this.props.accounts[vrtc_loginid] ? this.props.accounts[vrtc_loginid].balance : 0;\n        const mt5_demo_total = this.props.mt5_login_list\n            .filter(account => /^demo/.test(account.group))\n            .reduce(\n                (total, account) => {\n                    total.balance += account.balance;\n                    return total;\n                },\n                { balance: 0 }\n            );\n        return Array.isArray(this.props.mt5_login_list) ? mt5_demo_total.balance + vrtc_balance : vrtc_balance;\n    }\n\n    get total_real_assets() {\n        return this.props.obj_total_balance.amount_real + this.props.obj_total_balance.amount_mt5;\n    }\n\n    render() {\n        if (!this.props.is_logged_in) return false;\n\n        const total_assets_message_demo = this.props.is_mt5_allowed\n            ? localize('Total assets in your Deriv and DMT5 demo accounts.')\n            : localize('Total assets in your Deriv demo accounts.');\n\n        const total_assets_message_real =\n            this.props.is_mt5_allowed && this.props.has_any_real_account\n                ? localize('Total assets in your Deriv and DMT5 real accounts.')\n                : localize('Total assets in your Deriv real accounts.');\n\n        const total_assets_message = this.is_real_account_tab ? total_assets_message_real : total_assets_message_demo;\n\n        const demo_accounts = (\n            <div className='acc-switcher__list-wrapper'>\n                <>\n                    <AccountWrapper\n                        header={<Localize i18n_default_text='Deriv Accounts' />}\n                        is_visible={this.state.is_demo_deriv_visible}\n                        toggleVisibility={() => {\n                            this.toggleVisibility('demo_deriv');\n                        }}\n                    >\n                        <div className='acc-switcher__accounts'>\n                            {this.sorted_account_list\n                                .filter(account => account.is_virtual)\n                                .map(account => (\n                                    <AccountList\n                                        key={account.loginid}\n                                        balance={this.props.accounts[account.loginid].balance}\n                                        currency={this.props.accounts[account.loginid].currency}\n                                        currency_icon={`IcCurrency-${account.icon}`}\n                                        display_type={'currency'}\n                                        has_balance={'balance' in this.props.accounts[account.loginid]}\n                                        is_disabled={account.is_disabled}\n                                        is_virtual={account.is_virtual}\n                                        loginid={account.loginid}\n                                        onClickAccount={\n                                            account.is_disabled ? undefined : this.doSwitch.bind(this, account.loginid)\n                                        }\n                                        selected_loginid={this.props.account_loginid}\n                                    />\n                                ))}\n                        </div>\n                    </AccountWrapper>\n                </>\n                {this.props.is_mt5_allowed && (\n                    <>\n                        <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                        <AccountWrapper\n                            header={<Localize i18n_default_text='DMT5 Accounts' />}\n                            is_visible={this.state.is_demo_dmt5_visible}\n                            toggleVisibility={() => {\n                                this.toggleVisibility('demo_dmt5');\n                            }}\n                        >\n                            {this.props.is_loading_mt5 ? (\n                                <div className='acc-switcher__accounts--is-loading'>\n                                    <AccountsItemLoader speed={3} />\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {this.props.has_mt5_login && (\n                                        <div\n                                            className={classNames('acc-switcher__accounts', {\n                                                'acc-switcher__accounts--has-add-account': this\n                                                    .has_demo_mt5_upgrade_button,\n                                            })}\n                                        >\n                                            {this.sorted_mt5_list\n                                                .filter(account => /^demo/.test(account.group))\n                                                .map(account => (\n                                                    <AccountList\n                                                        key={account.login}\n                                                        account_type={account.group}\n                                                        balance={account.balance}\n                                                        currency={account.currency}\n                                                        currency_icon={`IcMt5-${getMT5AccountDisplay(account.group)}`}\n                                                        has_balance={'balance' in account}\n                                                        is_virtual\n                                                        loginid={account.login}\n                                                        onClickAccount={this.redirectToMt5Demo}\n                                                    />\n                                                ))}\n                                        </div>\n                                    )}\n                                    {this.has_demo_mt5_upgrade_button && (\n                                        <ButtonAddAccount\n                                            is_currency_required={false}\n                                            onClick={this.redirectToMt5Demo}\n                                            text={<Localize i18n_default_text='Add DMT5 account' />}\n                                        />\n                                    )}\n                                </React.Fragment>\n                            )}\n                        </AccountWrapper>\n                    </>\n                )}\n            </div>\n        );\n\n        const real_accounts = (\n            <div className='acc-switcher__list-wrapper'>\n                <>\n                    <AccountWrapper\n                        header={<Localize i18n_default_text='Deriv Accounts' />}\n                        is_visible={this.state.is_real_deriv_visible}\n                        toggleVisibility={() => {\n                            this.toggleVisibility('real_deriv');\n                        }}\n                    >\n                        <div\n                            className={classNames('acc-switcher__accounts', {\n                                'acc-switcher__accounts--has-add-account': this.has_add_button,\n                            })}\n                        >\n                            {this.sorted_account_list\n                                .filter(account => !account.is_virtual)\n                                .map(account => (\n                                    <AccountList\n                                        key={account.loginid}\n                                        balance={this.props.accounts[account.loginid].balance}\n                                        currency={this.props.accounts[account.loginid].currency}\n                                        currency_icon={`IcCurrency-${account.icon}`}\n                                        display_type={'currency'}\n                                        has_balance={'balance' in this.props.accounts[account.loginid]}\n                                        is_disabled={account.is_disabled}\n                                        is_virtual={account.is_virtual}\n                                        loginid={account.loginid}\n                                        onClickAccount={\n                                            account.is_disabled ? undefined : this.doSwitch.bind(this, account.loginid)\n                                        }\n                                        selected_loginid={this.props.account_loginid}\n                                        setCurrency={() => {\n                                            this.props.toggleAccountsDialog();\n                                            this.props.openRealAccountSignup();\n                                        }}\n                                    />\n                                ))}\n                        </div>\n                        {this.has_add_button && (\n                            <ButtonAddAccount\n                                has_set_currency={!this.props.has_any_real_account ? true : this.has_set_currency}\n                                onClick={this.can_upgrade ? this.onClickUpgrade : this.props.openRealAccountSignup}\n                                toggleSetCurrency={this.setAccountCurrency}\n                                text={<Localize i18n_default_text='Add Deriv account' />}\n                            />\n                        )}\n                    </AccountWrapper>\n                </>\n                {this.props.is_mt5_allowed && this.props.has_any_real_account && (\n                    <>\n                        <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                        <AccountWrapper\n                            header={<Localize i18n_default_text='DMT5 Accounts' />}\n                            is_visible={this.state.is_real_dmt5_visible}\n                            toggleVisibility={() => {\n                                this.toggleVisibility('real_dmt5');\n                            }}\n                        >\n                            {this.props.is_loading_mt5 ? (\n                                <div className='acc-switcher__accounts--is-loading'>\n                                    <AccountsItemLoader speed={3} />\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {this.props.has_mt5_login && (\n                                        <div\n                                            className={classNames('acc-switcher__accounts', {\n                                                'acc-switcher__accounts--has-add-account': this\n                                                    .has_real_mt5_upgrade_button,\n                                            })}\n                                        >\n                                            {this.sorted_mt5_list\n                                                .filter(account => !/^demo/.test(account.group))\n                                                .map(account => (\n                                                    <AccountList\n                                                        key={account.login}\n                                                        account_type={account.group}\n                                                        balance={account.balance}\n                                                        currency={account.currency}\n                                                        currency_icon={`IcMt5-${getMT5AccountDisplay(account.group)}`}\n                                                        has_balance={'balance' in account}\n                                                        loginid={account.login}\n                                                        onClickAccount={this.redirectToMt5Real}\n                                                    />\n                                                ))}\n                                        </div>\n                                    )}\n                                    {this.has_real_mt5_upgrade_button && (\n                                        <ButtonAddAccount\n                                            has_set_currency={this.has_set_currency}\n                                            toggleSetCurrency={this.setAccountCurrency}\n                                            onClick={this.redirectToMt5Real}\n                                            text={<Localize i18n_default_text='Add DMT5 account' />}\n                                        />\n                                    )}\n                                </React.Fragment>\n                            )}\n                        </AccountWrapper>\n                    </>\n                )}\n            </div>\n        );\n\n        return (\n            <div className='acc-switcher__list' ref={this.setWrapperRef}>\n                <Tabs\n                    active_index={this.state.active_tab_index}\n                    className='acc-switcher__list-tabs'\n                    onTabItemClick={this.updateAccountTabIndex}\n                    top\n                >\n                    {/* TODO: De-couple and refactor demo and real accounts groups\n                        into a single reusable AccountListItem component */}\n                    <div label={localize('Real')}>\n                        <DesktopWrapper>\n                            <ThemedScrollbars\n                                autoHeight\n                                autoHide\n                                autoHeightMax={354}\n                                renderTrackHorizontal={props => (\n                                    <div {...props} className='track-horizontal' style={{ display: 'none' }} />\n                                )}\n                                renderThumbHorizontal={props => (\n                                    <div {...props} className='thumb-horizontal' style={{ display: 'none' }} />\n                                )}\n                            >\n                                {real_accounts}\n                            </ThemedScrollbars>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='204px'>\n                                {real_accounts}\n                            </Div100vhContainer>\n                        </MobileWrapper>\n                    </div>\n                    <div label={localize('Demo')}>\n                        <DesktopWrapper>\n                            <ThemedScrollbars\n                                autoHeight\n                                autoHide\n                                autoHeightMax={354}\n                                renderTrackHorizontal={props => (\n                                    <div {...props} className='track-horizontal' style={{ display: 'none' }} />\n                                )}\n                                renderThumbHorizontal={props => (\n                                    <div {...props} className='thumb-horizontal' style={{ display: 'none' }} />\n                                )}\n                            >\n                                {demo_accounts}\n                            </ThemedScrollbars>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='204px'>\n                                {demo_accounts}\n                            </Div100vhContainer>\n                        </MobileWrapper>\n                    </div>\n                </Tabs>\n                <div\n                    className={classNames('acc-switcher__separator', {\n                        'acc-switcher__separator--auto-margin': this.props.is_mobile,\n                    })}\n                />\n                <div className='acc-switcher__total'>\n                    <span>\n                        <Localize i18n_default_text='Total assets' />\n                    </span>\n                    <span\n                        className={classNames('acc-switcher__balance', {\n                            'acc-switcher__balance--virtual': !this.is_real_account_tab,\n                        })}\n                    >\n                        <Money\n                            currency={this.is_real_account_tab ? this.props.obj_total_balance.currency : 'USD'}\n                            amount={CurrencyUtils.formatMoney(\n                                this.is_real_account_tab ? this.props.obj_total_balance.currency : 'USD',\n                                this.is_real_account_tab ? this.total_real_assets : this.total_demo_assets,\n                                true\n                            )}\n                            should_format={false}\n                        />\n                    </span>\n                </div>\n                <div className='acc-switcher__total-subtitle'>\n                    <span>{total_assets_message}</span>\n                </div>\n                <div className='acc-switcher__separator' />\n                <div id='dt_logout_button' className='acc-switcher__logout'>\n                    <span className='acc-switcher__logout-text' onClick={this.handleLogout}>\n                        {localize('Log out')}\n                    </span>\n                    <Icon\n                        icon='IcLogout'\n                        className='acc-switcher__logout-icon drawer__icon'\n                        onClick={this.handleLogout}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nAccountSwitcher.propTypes = {\n    account_list: PropTypes.array,\n    account_loginid: PropTypes.string,\n    accounts: PropTypes.object,\n    display: PropTypes.string,\n    has_any_real_account: PropTypes.bool,\n    has_fiat: PropTypes.bool,\n    has_mt5_login: PropTypes.bool,\n    is_loading_mt5: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    is_mt5_allowed: PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_upgrade_enabled: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    mt5_login_list: PropTypes.array,\n    obj_total_balance: PropTypes.object,\n    toggleAccountsDialog: PropTypes.func,\n    togglePositionsDrawer: PropTypes.func,\n    toggleSetCurrencyModal: PropTypes.func,\n    updateMt5LoginList: PropTypes.func,\n};\n\nconst account_switcher = withRouter(\n    connect(({ client, ui }) => ({\n        account_loginid: client.loginid,\n        accounts: client.accounts,\n        has_fiat: client.has_fiat,\n        can_change_currency: client.can_change_currency,\n        account_list: client.account_list,\n        can_upgrade: client.can_upgrade,\n        can_upgrade_to: client.can_upgrade_to,\n        has_mt5_login: client.has_mt5_login,\n        is_loading_mt5: client.is_populating_mt5_account_list,\n        is_logged_in: client.is_logged_in,\n        is_mt5_allowed: client.is_mt5_allowed,\n        is_virtual: client.is_virtual,\n        has_any_real_account: client.has_any_real_account,\n        landing_company_shortcode: client.landing_company_shortcode,\n        mt5_login_list: client.mt5_login_list,\n        obj_total_balance: client.obj_total_balance,\n        switchAccount: client.switchAccount,\n        logoutClient: client.logout,\n        updateMt5LoginList: client.updateMt5LoginList,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        toggleAccountsDialog: ui.toggleAccountsDialog,\n        togglePositionsDrawer: ui.togglePositionsDrawer,\n        toggleSetCurrencyModal: ui.toggleSetCurrencyModal,\n    }))(AccountSwitcher)\n);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Div100vhContainer, Modal } from '@deriv/components';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountSwitcherMobile = props => {\n    const { disableApp, enableApp, is_visible, is_upgrade_enabled, toggle } = props;\n    return (\n        <Modal\n            id='dt_account_switcher_modal'\n            className='accounts-switcher'\n            enableApp={enableApp}\n            is_open={is_visible}\n            is_vertical_top\n            disableApp={disableApp}\n            has_close_icon={false}\n            toggleModal={toggle}\n            height='auto'\n            width='calc(100vw - 32px)'\n        >\n            <Div100vhContainer\n                className={classNames('acc-switcher__wrapper', 'acc-switcher__wrapper--is-mobile')}\n                max_autoheight_offset='48px'\n            >\n                <AccountSwitcher is_mobile is_visible={true} toggle={toggle} is_upgrade_enabled={is_upgrade_enabled} />\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nAccountSwitcherMobile.propTypes = {\n    children: PropTypes.any,\n    onClose: PropTypes.func,\n    title: PropTypes.string,\n    visible: PropTypes.bool,\n    wrapperClassName: PropTypes.string,\n};\n\nexport default AccountSwitcherMobile;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { DesktopWrapper, Icon, MobileWrapper, Popover } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport AccountSwitcherMobile from 'App/Containers/AccountSwitcher/account-switcher-mobile.jsx';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountInfoWrapper = ({ is_disabled, disabled_message, children }) =>\n    is_disabled && disabled_message ? (\n        <Popover alignment='bottom' message={disabled_message} zIndex={99999}>\n            {children}\n        </Popover>\n    ) : (\n        <React.Fragment>{children}</React.Fragment>\n    );\n\nconst AccountInfo = ({\n    acc_switcher_disabled_message,\n    balance,\n    currency,\n    disableApp,\n    enableApp,\n    is_dialog_on,\n    is_upgrade_enabled,\n    is_virtual,\n    toggleDialog,\n    is_disabled,\n}) => (\n    <div className='acc-info__wrapper'>\n        <div className='acc-info__separator' />\n        <AccountInfoWrapper is_disabled={is_disabled} disabled_message={acc_switcher_disabled_message}>\n            <div\n                className={classNames('acc-info', {\n                    'acc-info--show': is_dialog_on,\n                    'acc-info--is-virtual': is_virtual,\n                    'acc-info--is-disabled': is_disabled,\n                })}\n                onClick={is_disabled ? undefined : toggleDialog}\n            >\n                <span className='acc-info__id'>\n                    <DesktopWrapper>\n                        <Icon\n                            icon={`IcCurrency-${is_virtual ? 'virtual' : currency || 'Unknown'}`}\n                            className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n                            size={24}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        {(is_virtual || currency) && (\n                            <Icon\n                                icon={`IcCurrency-${is_virtual ? 'virtual' : currency}`}\n                                className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n                                size={24}\n                            />\n                        )}\n                    </MobileWrapper>\n                </span>\n                {typeof balance !== 'undefined' && (\n                    <p\n                        className={classNames('acc-info__balance', {\n                            'acc-info__balance--no-currency': !currency && !is_virtual,\n                        })}\n                    >\n                        <span\n                            className={classNames('symbols', {\n                                [`symbols--${(currency || '').toLowerCase()}`]: currency,\n                            })}\n                        />\n                        {!currency && <Localize i18n_default_text='No currency assigned' />}\n                        {currency && balance}\n                    </p>\n                )}\n                {is_disabled ? (\n                    <Icon icon='IcLock' />\n                ) : (\n                    <Icon icon='IcChevronDownBold' className='acc-info__select-arrow' />\n                )}\n            </div>\n        </AccountInfoWrapper>\n        <MobileWrapper>\n            <AccountSwitcherMobile\n                is_visible={is_dialog_on}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                toggle={toggleDialog}\n                is_upgrade_enabled={is_upgrade_enabled}\n            />\n        </MobileWrapper>\n        <DesktopWrapper>\n            <CSSTransition\n                in={is_dialog_on}\n                timeout={200}\n                classNames={{\n                    enter: 'acc-switcher__wrapper--enter',\n                    enterDone: 'acc-switcher__wrapper--enter-done',\n                    exit: 'acc-switcher__wrapper--exit',\n                }}\n                unmountOnExit\n            >\n                <div className='acc-switcher__wrapper'>\n                    <AccountSwitcher\n                        is_visible={is_dialog_on}\n                        toggle={toggleDialog}\n                        is_upgrade_enabled={is_upgrade_enabled}\n                    />\n                </div>\n            </CSSTransition>\n        </DesktopWrapper>\n    </div>\n);\n\nAccountInfo.propTypes = {\n    acc_switcher_disabled_message: PropTypes.string,\n    account_type: PropTypes.string,\n    balance: PropTypes.string,\n    currency: PropTypes.string,\n    is_dialog_on: PropTypes.bool,\n    is_disabled: PropTypes.bool,\n    is_upgrade_enabled: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    loginid: PropTypes.string,\n    toggleDialog: PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}