{"version":3,"sources":["webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx","webpack:///./App/Containers/AccountSignupModal/account-signup-modal.jsx"],"names":["localize","field","class_prefix","touched","residence","errors","residence_list","value","text","e","setFieldTouched","setFieldValue","children","SetResidenceForm","PropTypes","node","header_text","arrayOf","index_of_selection","item","state","this","onResidenceSelection","onSignupComplete","error","props","enableApp","validateSignupPassthrough","has_valid_residence","toLowerCase","modded_values","onSignup","website_name","AccountSignup","signupInitialValues","onSignupPassthrough","handleBlur","classNames","values","input","target","handleChange","Component","propTypes","AccountSignupModal","toggleAccountSignupModal","is_loading","disableApp","is_visible","client"],"mappings":"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","file":"js/core.account-signup-modal.640a2d477d094e6abd4c.js","sourcesContent":["import { Autocomplete, DesktopWrapper, MobileWrapper, SelectNative } from '@deriv/components';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    class_prefix = 'set-residence',\n    children,\n    header_text,\n    errors,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => (\n    <div className={`${class_prefix}__residence-selection`}>\n        {!!header_text && <p className={`${class_prefix}__heading`}>{header_text}</p>}\n        <p className={`${class_prefix}__${header_text ? 'text' : 'heading'}`}>{localize('Where do you live?')}</p>\n        <Field name='residence'>\n            {({ field }) => (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <Autocomplete\n                            {...field}\n                            autoComplete='off'\n                            className={`${class_prefix}__residence-field`}\n                            dropdown_offset='3.2rem'\n                            type='text'\n                            label={localize('Choose country')}\n                            error={touched.residence && errors.residence}\n                            required\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) => setFieldValue('residence', value ? text : '', true)}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <SelectNative\n                            label={localize('Choose country')}\n                            value={field.value}\n                            list_items={residence_list}\n                            error={touched.residence && errors.residence}\n                            required\n                            use_text={true}\n                            onChange={e => {\n                                setFieldTouched('residence', true);\n                                setFieldValue('residence', e.target.value, true);\n                            }}\n                        />\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n        </Field>\n        {children}\n    </div>\n);\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.node,\n    class_prefix: PropTypes.string,\n    header_text: PropTypes.string,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default SetResidenceForm;\n","import classNames from 'classnames';\nimport { Button, Dialog, PasswordInput, PasswordMeter } from '@deriv/components';\nimport { Field, Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { localize, Localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport { validPassword } from 'Utils/Validator/declarative-validation-rules';\nimport { website_name } from 'App/Constants/app-config';\nimport ResidenceForm from '../SetResidenceModal/set-residence-form.jsx';\nimport 'Sass/app/modules/account-signup.scss';\n\nconst signupInitialValues = { password: '', residence: '' };\n\nconst validateSignup = (values, residence_list) => {\n    const errors = {};\n    const min_password_length = 6;\n\n    if (values.password && (values.password.length < min_password_length || !validPassword(values.password))) {\n        errors.password = true;\n    }\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.residence.toLowerCase()\n        );\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    return errors;\n};\n\nclass AccountSignup extends React.Component {\n    state = {\n        has_valid_residence: false,\n        pw_input: '',\n    };\n\n    updatePassword = string => {\n        this.setState({ pw_input: string });\n    };\n\n    onResidenceSelection = () => {\n        this.setState({ has_valid_residence: true });\n    };\n\n    onSignupComplete = error => {\n        // Error would be returned on invalid token (and the like) cases.\n        // TODO: Proper error handling (currently we have no place to put the message)\n\n        if (error) {\n            throw Error(error);\n        }\n\n        // Handle lower level modal controls due to overriding modal rendering\n        this.props.isModalVisible(false);\n        this.props.enableApp();\n    };\n\n    render() {\n        const { onSignup, residence_list } = this.props;\n\n        const validateSignupPassthrough = values => validateSignup(values, residence_list);\n        const onSignupPassthrough = values => {\n            const index_of_selection = residence_list.findIndex(\n                item => item.text.toLowerCase() === values.residence.toLowerCase()\n            );\n\n            const modded_values = { ...values, residence: residence_list[index_of_selection].value };\n            onSignup(modded_values, this.onSignupComplete);\n        };\n        return (\n            <div className='account-signup'>\n                <Formik\n                    initialValues={signupInitialValues}\n                    validate={validateSignupPassthrough}\n                    onSubmit={onSignupPassthrough}\n                >\n                    {({\n                        isSubmitting,\n                        handleBlur,\n                        errors,\n                        handleChange,\n                        values,\n                        setFieldValue,\n                        setFieldTouched,\n                        touched,\n                    }) => (\n                        <Form>\n                            <React.Fragment>\n                                {!this.state.has_valid_residence ? (\n                                    <ResidenceForm\n                                        header_text={localize('Thanks for verifying your email')}\n                                        class_prefix='account-signup'\n                                        errors={errors}\n                                        touched={touched}\n                                        setFieldTouched={setFieldTouched}\n                                        setFieldValue={setFieldValue}\n                                        residence_list={residence_list}\n                                    >\n                                        <Button\n                                            className={classNames('account-signup__btn', {\n                                                'account-signup__btn--disabled': !values.residence || errors.residence,\n                                            })}\n                                            type='button'\n                                            is_disabled={!values.residence || !!errors.residence}\n                                            onClick={this.onResidenceSelection}\n                                            primary\n                                            text={localize('Next')}\n                                        />\n                                    </ResidenceForm>\n                                ) : (\n                                    <div className='account-signup__password-selection'>\n                                        <p className='account-signup__heading'>\n                                            <Localize i18n_default_text='Keep your account secure with a password' />\n                                        </p>\n                                        <Field name='password'>\n                                            {({ field }) => (\n                                                <PasswordMeter\n                                                    input={this.state.pw_input}\n                                                    error={touched.password && errors.password}\n                                                >\n                                                    <PasswordInput\n                                                        {...field}\n                                                        className='account-signup__password-field'\n                                                        label={localize('Create a password')}\n                                                        error={touched.password && errors.password}\n                                                        required\n                                                        value={values.password}\n                                                        onBlur={handleBlur}\n                                                        onChange={e => {\n                                                            const input = e.target;\n                                                            setFieldTouched('password', true);\n                                                            if (input) this.updatePassword(input.value);\n                                                            handleChange(e);\n                                                        }}\n                                                    />\n                                                </PasswordMeter>\n                                            )}\n                                        </Field>\n                                        <p className='account-signup__subtext'>\n                                            <Localize i18n_default_text='Strong passwords contain at least 6 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                                        </p>\n\n                                        <Button\n                                            className={classNames('account-signup__btn', {\n                                                'account-signup__btn--disabled':\n                                                    !values.password || errors.password || isSubmitting,\n                                            })}\n                                            type='submit'\n                                            is_disabled={!values.password || !!errors.password || isSubmitting}\n                                            text={localize('Start trading')}\n                                            primary\n                                        />\n                                    </div>\n                                )}\n                            </React.Fragment>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n\nAccountSignup.propTypes = {\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.array,\n};\n\nconst AccountSignupModal = ({\n    enableApp,\n    disableApp,\n    is_loading,\n    is_visible,\n    onSignup,\n    residence_list,\n    toggleAccountSignupModal,\n}) => {\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_mobile_full_width={false}\n            is_content_centered\n        >\n            <AccountSignup\n                onSignup={onSignup}\n                residence_list={residence_list}\n                isModalVisible={toggleAccountSignupModal}\n                enableApp={enableApp}\n            />\n        </Dialog>\n    );\n};\n\nAccountSignupModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(({ ui, client }) => ({\n    is_visible: ui.is_account_signup_modal_visible,\n    toggleAccountSignupModal: ui.toggleAccountSignupModal,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_loading: ui.is_loading,\n    onSignup: client.onSignup,\n    residence_list: client.residence_list,\n}))(AccountSignupModal);\n"],"sourceRoot":""}