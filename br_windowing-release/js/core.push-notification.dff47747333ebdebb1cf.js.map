{"version":3,"sources":["webpack:///./App/Components/Elements/Notifications/notification-bar.jsx","webpack:///./App/Containers/push-notification.jsx"],"names":["onClose","setState","clearTimeout","NotificationBar","this","show","props","autoShow","className","duration","has_content_close","type","enterDone","React","cloneElement","child","content","PropTypes","string","PushNotification","push_notifications","map","notification","idx","key","propTypes","array","connect","ui"],"mappings":"itCAqBIA,EAAgB,+CACZ,MAAKC,GAAS,EAAiB,mBAC3BC,WAAa,CADjB,U,iDA+CRC,O,0OA5DwB,G,EAAA,E,wBAChB,MAAK,WACD,MAAAC,KACoBC,KAAI,MAAE,OAAR,KAAd,6BADmB,EAEfC,SAAMC,CACjB,Y,6BAIDL,CACH,2B,4CAQQ,C,aAAA,qBAEDM,EAFC,KAIDC,EAJC,WAKDC,IALC,UAMDC,EANC,EAMDA,QAGJ,EACI,EAAC,SACG,EADJ,oBAEI,EAASF,EAAY,KACrB,WAAU,cAAE,iBACRG,QAAS,MAAE,KADH,QAHhB,OAMI,YAEA,yCAEQ,kBACAJ,yBAFsC,UAArB,wBAKrB,oCAAKA,UAAU,KAE4B,IAC7BK,cAAMC,MAAaC,CAASf,UAAS,6BAArC,EAD6B,gCADrB,OAIZgB,IAET,aAACN,EAAD,CACQ,QAAS,EAAKV,QAAL,aACV,gCAAM,QAAK,aAAX,WAAqBQ,UAAU,4BAf3C,IATR,mBA8BH,e,wEAGLL,E,CACIK,eAEAE,YAAmBO,CACnBN,UAAMM,IAAUC,OAJpB,+CAOA,kBAAef,IAAf,K,yBCvEMgB,EAAmB,SAAC,GAAD,SAAGC,mBACLC,KAAI,SAACC,EAAcC,GAAQ,IAClChB,EAAsCe,EAAtCf,SAAUS,EAA4BM,EAA5BN,QAASP,EAAmBa,EAAnBb,SAAUE,EAASW,EAATX,KACrC,OACI,kBAAC,EAAD,CACIa,IAAKD,EACLhB,SAAUA,EACVS,QAASA,EACTP,SAAUA,EACVE,KAAMA,GAAQ,OACdD,mBAAmB,QAKnCS,EAAiBM,UAAY,CACzBL,mBAAoBH,IAAUS,OAGnBC,uBAAQ,kBAAa,CAChCP,mBADmB,EAAGQ,GACCR,sBADZO,CAEXR","file":"js/core.push-notification.dff47747333ebdebb1cf.js","sourcesContent":["import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon } from '@deriv/components';\n\nclass NotificationBar extends React.Component {\n    state = {};\n\n    componentDidMount() {\n        if (!this.state.show) {\n            this.timer = setTimeout(() => {\n                this.setState({ show: true });\n            }, this.props.autoShow || 500);\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timer);\n    }\n\n    onClose = () => {\n        this.setState({ show: false }, () => {\n            clearTimeout(this.timer);\n        });\n    };\n\n    render() {\n        const {\n            className,\n            content,\n            duration,\n            has_content_close,\n            type, // TODO: add support for different type of notifications\n        } = this.props;\n\n        return (\n            <CSSTransition\n                in={this.state.show}\n                timeout={duration || 500}\n                classNames={{\n                    enterDone: 'notification-bar--is-active',\n                }}\n                unmountOnExit\n            >\n                <div\n                    className={classNames('notification-bar', {\n                        'notification-bar--info': type === 'info',\n                        className,\n                    })}\n                >\n                    <div className='notification-bar__message'>\n                        {has_content_close\n                            ? React.Children.map(content, child =>\n                                  React.cloneElement(child, { onClose: this.onClose.bind(this) })\n                              )\n                            : content}\n                    </div>\n                    {!has_content_close && (\n                        <div onClick={this.onClose.bind(this)} className='notification-bar__button'>\n                            <Icon icon='IcCross' className='notification-bar__icon' />\n                        </div>\n                    )}\n                </div>\n            </CSSTransition>\n        );\n    }\n}\n\nNotificationBar.propTypes = {\n    className: PropTypes.string,\n    content: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    has_content_close: PropTypes.bool,\n    type: PropTypes.string,\n};\n\nexport default NotificationBar;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'Stores/connect';\nimport NotificationBar from '../Components/Elements/Notifications/notification-bar.jsx';\n\nconst PushNotification = ({ push_notifications }) =>\n    push_notifications.map((notification, idx) => {\n        const { autoShow, content, duration, type } = notification;\n        return (\n            <NotificationBar\n                key={idx}\n                autoShow={autoShow}\n                content={content}\n                duration={duration}\n                type={type || 'info'}\n                has_content_close={true}\n            />\n        );\n    });\n\nPushNotification.propTypes = {\n    push_notifications: PropTypes.array,\n};\n\nexport default connect(({ ui }) => ({\n    push_notifications: ui.push_notifications,\n}))(PushNotification);\n"],"sourceRoot":""}