{"version":3,"sources":["webpack:///./App/Containers/ResetPasswordModal/reset-password-modal.jsx"],"names":["actions","password","console","error","error_msg","setStatus","reset_complete","reset_password","handleSubmit","verification_code","api_request","response","onResetComplete","min_password_length","resetInitialValues","errors","isSubmitting","handleChange","status","values","className","handleBlur","touched","Component","ResetPassword","isModalVisible","PropTypes","string","ResetPasswordModal","toggleResetPasswordModal","disableApp","enableApp","is_loading","logoutClient","propTypes","is_visible","connect","client"],"mappings":"owCAgBQA,aAAoBC,MAEpB,G,4FACA,MAAe,GAEXC,UAAQC,UAAMC,OAAd,2BACAJ,KAAQK,UAAU,GA8CV,OA7CR,mD,8BAOH,GAJDL,EAAQK,eAAU,GAAEC,YAAgB,CAApC,cAEA,EAQIC,O,wBAHRC,UAAgB,CACJC,cACY,EAApB,WAME,gBAAeC,IAAjB,wEAAmC,6DAC/B,EAAIC,CACA,iBACH,aAFD,EAEO,SACH,kBAAKC,G,0BAJsB,e,EAAA,G,EAAA,mFAAnC,O,sBAAA,oD,0BAUY,KAAZ,EACMC,U,mBAIL,M,kOAfkC,K,qCAyBiBT,OAF5C,aAAC,EAAD,gBADJ,IACI,2BACI,YAAeU,GACyBV,GAExC,E,UAoFd,O,mOA1IFQ,E,KAwDgCG,G,EAAAA,EAAf,qCAAwCC,yBAAxC,UAAsDC,kBAAtD,IAAoEC,kBAApE,eACG,EAGiB,cAAU,CAAf,gBACI,EAAG,UAAU,IACC,4BAAV,SAEJ,oBAAG,SAAS,GAAZ,IACI,IAAC,WAAS,IAAiB,OANtC,EAUG,SAAK,EAAU,UACX,iBAAG,EAAU,eACT,WAAU,yBAAkB,uFADhC,UAGA,sCAAU,kBAAU,KAApB,UACI,2BACI,IAAOC,cAAOlB,WADlB,CAEI,kBAAeA,oCAEf,kBAAC,KACGmB,UAAU,2BACV,IAAK,cAFT,YAGI,kBAAgB,kDAChB,IAAUH,cAJd,OAKI,UAAQI,sCACR,IAAOC,cAAQrB,IAAR,CACP,UAAOkB,2BACP,kBAAc,WARlB,CASI,kBAAQ,2BAlBxB,IAsBI,0BAAGC,UAAU,4BACRF,IAAM,cACH,KACI,iBACA,MAAM,EAAE,sBAAEd,kBAAkBA,KAApB,2CAHf,KAMG,WAAU,8CAPlB,SAWA,EACI,SACI,6BADyC,MADjD,WAKI,gBALJ,OAMI,gBACA,IAAO,mBAPX,UASI,2BAAU,YAAkB,8BAThC,kBA9CnB,gBARb,QAyEH,yB,oKA1H6BmB,I,wDA6HlCC,iCAA0B,4BAEtBC,KAAc,SACdhB,aAAmBiB,EAAUC,wBAHjC,Y,8BAMMC,kBAAqB,mC,2BAMvBnB,E,CAEE,IADDoB,WAGW,EAAU,UAAlB,CAAgC,cAAYC,KAAY,eAAWC,IAAnE,KAA8E,kBAAYC,YAGlF,MAAgBH,SAFpB,GAGI,IAAAE,EAAWA,EAHf,UAII,EAAcE,aAN1B,eATJ,e,iBAqBAL,EAAmBM,EAAY,kBAC3BJ,EAD2B,2BAE3BC,WAAWL,cAFgB,KAG3BM,WAAYN,EACZS,WAAYT,EACZO,UAAY,EACZJ,cACApB,kBAAmBiB,EAAUC,CAPjC,oBAUA,eAAeS,EAAQ,+BAGnBN,EAAeA,UAHyB,CAIxCE,WAAU,IAAKA,KACfC,cAAcI,KACdR,oBACApB,eAAmB4B,KAPqB,aAArB,SAAR,yBAAf,S","file":"js/core.reset-password-modal.1ce05c42d53bf00c4e46.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Formik, Form } from 'formik';\nimport { Button, Dialog, PasswordInput, PasswordMeter } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport { validPassword } from 'Utils/Validator/declarative-validation-rules';\nimport { redirectToLogin } from '_common/base/login';\nimport { WS } from 'Services/index';\n\nconst resetInitialValues = { password: '' };\n\nclass ResetPassword extends React.Component {\n    onResetComplete = (error_msg, actions) => {\n        actions.setSubmitting(false);\n        actions.resetForm({ password: '' });\n        // Error would be returned on invalid token (and the like) cases.\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error_msg) {\n            // eslint-disable-next-line no-console\n            console.error(error_msg);\n            actions.setStatus({ error_msg });\n            return;\n        }\n\n        actions.setStatus({ reset_complete: true });\n\n        this.props.logoutClient().then(() => {\n            redirectToLogin();\n        });\n    };\n\n    handleSubmit = (values, actions) => {\n        const { verification_code } = this.props;\n        const api_request = {\n            reset_password: 1,\n            new_password: values.password,\n            verification_code,\n        };\n\n        WS.resetPassword(api_request).then(async response => {\n            if (response.error) {\n                this.onResetComplete(response.error.message, actions);\n            } else {\n                this.onResetComplete(null, actions);\n            }\n        });\n    };\n\n    validateReset = values => {\n        const errors = {};\n        const min_password_length = 6;\n\n        if (values.password && (values.password.length < min_password_length || !validPassword(values.password))) {\n            errors.password = true;\n        }\n\n        return errors;\n    };\n\n    render() {\n        return (\n            <div className='reset-password'>\n                <Formik\n                    initialValues={resetInitialValues}\n                    initialStatus={{ reset_complete: false, error_msg: '' }}\n                    validate={this.validateReset}\n                    onSubmit={this.handleSubmit}\n                >\n                    {({ handleBlur, errors, values, touched, isSubmitting, handleChange, status }) => (\n                        <Form>\n                            <React.Fragment>\n                                {status.reset_complete ? (\n                                    <div className='reset-password__password-selection'>\n                                        <p className='reset-password__heading'>\n                                            <Localize i18n_default_text='Your password has been changed' />\n                                        </p>\n                                        <p className='reset-password__subtext'>\n                                            <Localize i18n_default_text='We will now redirect you to the login page.' />\n                                        </p>\n                                    </div>\n                                ) : (\n                                    <div className='reset-password__password-selection'>\n                                        <p className='reset-password__heading'>\n                                            <Localize i18n_default_text='Choose a new password' />\n                                        </p>\n                                        <fieldset className='reset-password__fieldset'>\n                                            <PasswordMeter\n                                                input={values.password}\n                                                error={touched.password && errors.password}\n                                            >\n                                                <PasswordInput\n                                                    className='reset-password__password-field'\n                                                    name='password'\n                                                    label={localize('Create a password')}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    error={touched.password && errors.password}\n                                                    value={values.password}\n                                                    data-lpignore='true'\n                                                    required\n                                                />\n                                            </PasswordMeter>\n                                        </fieldset>\n                                        <p className='reset-password__subtext'>\n                                            {status.error_msg ? (\n                                                <Localize\n                                                    i18n_default_text='{{error_msg}}'\n                                                    values={{ error_msg: status.error_msg }}\n                                                />\n                                            ) : (\n                                                <Localize i18n_default_text='Strong passwords contain at least 6 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                                            )}\n                                        </p>\n\n                                        <Button\n                                            className={classNames('reset-password__btn', {\n                                                'reset-password__btn--disabled':\n                                                    !values.password || errors.password || isSubmitting,\n                                            })}\n                                            type='submit'\n                                            is_disabled={!values.password || errors.password || isSubmitting}\n                                            primary\n                                        >\n                                            <Localize i18n_default_text='Reset my password' />\n                                        </Button>\n                                    </div>\n                                )}\n                            </React.Fragment>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n\nResetPassword.propTypes = {\n    enableApp: PropTypes.func,\n    isModalVisible: PropTypes.func,\n    verification_code: PropTypes.string,\n};\n\nconst ResetPasswordModal = ({\n    enableApp,\n    disableApp,\n    is_loading,\n    is_visible,\n    logoutClient,\n    verification_code,\n    toggleResetPasswordModal,\n}) => {\n    return (\n        <Dialog is_visible={is_visible} disableApp={disableApp} enableApp={enableApp} is_loading={is_loading}>\n            <ResetPassword\n                verification_code={verification_code}\n                isModalVisible={toggleResetPasswordModal}\n                enableApp={enableApp}\n                logoutClient={logoutClient}\n            />\n        </Dialog>\n    );\n};\n\nResetPasswordModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logoutClient: PropTypes.func,\n    toggleResetPasswordModal: PropTypes.func,\n    verification_code: PropTypes.string,\n};\n\nexport default connect(({ ui, client }) => ({\n    is_visible: ui.is_reset_password_modal_visible,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_loading: ui.is_loading,\n    logoutClient: client.logout,\n    toggleResetPasswordModal: ui.toggleResetPasswordModal,\n    verification_code: client.verification_code.reset_password,\n}))(ResetPasswordModal);\n"],"sourceRoot":""}