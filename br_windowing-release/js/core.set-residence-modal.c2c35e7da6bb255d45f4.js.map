{"version":3,"sources":["webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx","webpack:///./App/Containers/SetResidenceModal/set-residence-modal.jsx"],"names":["localize","field","class_prefix","touched","residence","errors","residence_list","value","text","e","setFieldTouched","setFieldValue","children","SetResidenceForm","PropTypes","node","header_text","arrayOf","error","onSetResidencePassthrough","index_of_selection","validateResidence","values","isSubmitting","isResidenceText","website_name","onSetResidence","modded_values","Component","SetResidenceModal","disableApp","is_loading","is_visible","toggleSetResidenceModal","length","enableApp","propTypes","client","is_set_residence_modal_visible","ui"],"mappings":"wdAkBW,MAAS,YAAZ,IAAuEA,EAAS,eACzE,OAAK,wBACP,iBAAGC,YAAH,EACG,SAIY,IAAa,QACb,EAAS,EAAKC,gBACd,EAAe,EAAC,cAChB,EALJ,iBAMI,WAAOF,cAAS,OAChB,UAAOG,UAAQC,EAAaC,4BAC5B,GARJ,uBASI,aAAYC,SAThB,cAUI,OAAiB,6BAAGC,GAAH,8DAAUC,uBAAV,sDAVrB,IAFR,EAeI,QAEQ,OAAK,IAAER,cAAS,aADpB,8DAEI,aAAaO,MACb,UAAU,GAAED,SAHhB,qBAII,gBAAeF,SACf,YACA,yBANJ,kBAOI,QAAU,WAAAK,EAAK,UACXC,YACAC,aACH,4BA3BhB,cAiCJC,EA/CgB,OAAzB,qCAmDAC,IAAgB,cAAa,gCACzBD,MAAUE,mBAAUC,kBACpBb,QAAcY,MACdE,WAAaF,EACbR,QAAgBQ,WAAUG,EAAQH,UAJtC,YAOA,UAAeD,E,kiDC/CX,MAAYT,SAAW,KACnBC,SAAOD,qBAAP,2B,yIAgBA,sDACA,EAAIc,GAAO,a,0DAIX,uBAA0B,SAA1B,GACA,K,4TAIwBZ,G,EADnB,E,aAEL,MAAMa,WACF,MAAMC,KAAN,a,mBACA,EAAmB,iBAOK,WAAIC,oBAAkBC,CAAtB,UAFpB,iBAGI,kBAAUH,KAHd,cAKK,WAAGI,IAAH,4BArC+CC,SAAJ,SAAxD,KAEA,KAAIJ,UAEIK,CAD6F,IAAjG,2BAGH,kBAGL,oCAfJ,oG,oCASYpB,aAAA,E,SAkC0CM,OAAjC,SAVT,Y,+BACAe,SAAeC,EAAe,MAElC,E,+UACI,OAAK,UAAU,aAEUvB,EAAW,+BAQZ,SAAQC,GACR,MAFJ,eAGI,IAAeM,OACf,IAAgBL,OAEhB,kBAAG,EAAU,UAAb,OACKN,IACG,iFAGR,CACI,SACI,UADwC,cADhD,EAKI,eALJ,GAMI,kBAAqBI,KACrB,UAAMJ,0BACN,mBAAO,qHAnBf,UAHX,0BAPb,8D,kGAlByB4B,S,8CAgEjC,IAAMC,WAQA,EANFC,WAME,mBALFC,KAKE,mBAJFC,OAIE,MADFC,YAEA,IAAI3B,IAAe4B,UACnB,EACI,aACI,EAAYF,aACZ,EAAYF,aACZ,EAAWK,EAHf,eAII,EAAYJ,EAAU,eACtB,EAAmB,0BALvB,OAOI,SAAC,EAAD,KACI,kBAAgBL,IADpB,CAEI,aACA,aACAS,UAAWA,EAXnB,WADJ,aAVJ,wB,qBA4BAN,eAAkBO,EACdN,eAAYhB,EACZqB,eAAWrB,EACXiB,UAAYjB,MAHc,EAA9B,WASA,eAAuB,uCAAOuB,KAAP,WAAqB,SACxCL,eAAc,IAACM,KACfL,mBAAuB,QAAKA,aAElB,mBAAKH,SAJyB,GAKxCC,QAAYQ,GACZb,IAAgBW,OAChB/B,OAPmB,4CAQnBuB,wBARJ,0B,yIAIc,C","file":"js/core.set-residence-modal.c2c35e7da6bb255d45f4.js","sourcesContent":["import { Autocomplete, DesktopWrapper, MobileWrapper, SelectNative } from '@deriv/components';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    class_prefix = 'set-residence',\n    children,\n    header_text,\n    errors,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => (\n    <div className={`${class_prefix}__residence-selection`}>\n        {!!header_text && <p className={`${class_prefix}__heading`}>{header_text}</p>}\n        <p className={`${class_prefix}__${header_text ? 'text' : 'heading'}`}>{localize('Where do you live?')}</p>\n        <Field name='residence'>\n            {({ field }) => (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <Autocomplete\n                            {...field}\n                            autoComplete='off'\n                            className={`${class_prefix}__residence-field`}\n                            dropdown_offset='3.2rem'\n                            type='text'\n                            label={localize('Choose country')}\n                            error={touched.residence && errors.residence}\n                            required\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) => setFieldValue('residence', value ? text : '', true)}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <SelectNative\n                            label={localize('Choose country')}\n                            value={field.value}\n                            list_items={residence_list}\n                            error={touched.residence && errors.residence}\n                            required\n                            use_text={true}\n                            onChange={e => {\n                                setFieldTouched('residence', true);\n                                setFieldValue('residence', e.target.value, true);\n                            }}\n                        />\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n        </Field>\n        {children}\n    </div>\n);\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.node,\n    class_prefix: PropTypes.string,\n    header_text: PropTypes.string,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default SetResidenceForm;\n","import classNames from 'classnames';\nimport { Button, Dialog } from '@deriv/components';\nimport { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport { website_name } from 'App/Constants/app-config';\nimport ResidenceForm from './set-residence-form.jsx';\nimport 'Sass/app/modules/set-residence.scss';\n\n// TODO: Move some of these functions to helpers since some of them are shared with AccountSignUpModal\nconst isResidenceText = (item, values) => item.text.toLowerCase() === values.residence.toLowerCase();\n\nconst validateResidence = (values, residence_list) => {\n    const errors = {};\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(item => isResidenceText(item, values));\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    return errors;\n};\n\nclass SetResidence extends React.Component {\n    onSetResidenceComplete = error => {\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error) {\n            throw Error(error);\n        }\n        // Handle lower level modal controls due to overriding modal rendering\n        this.props.isModalVisible(false);\n        this.props.enableApp();\n    };\n\n    render() {\n        const { onSetResidence, residence_list } = this.props;\n        const onSetResidencePassthrough = values => {\n            const index_of_selection = residence_list.findIndex(item => isResidenceText(item, values));\n            const modded_values = { ...values, residence: residence_list[index_of_selection].value };\n            onSetResidence(modded_values, this.onSetResidenceComplete);\n        };\n        return (\n            <div className='set-residence'>\n                <Formik\n                    initialValues={{ residence: '' }}\n                    validate={values => validateResidence(values, residence_list)}\n                    onSubmit={onSetResidencePassthrough}\n                >\n                    {({ isSubmitting, errors, values, setFieldValue, touched }) => (\n                        <Form>\n                            <React.Fragment>\n                                <ResidenceForm\n                                    errors={errors}\n                                    touched={touched}\n                                    setFieldValue={setFieldValue}\n                                    residence_list={residence_list}\n                                >\n                                    <p className='set-residence__subtext'>\n                                        {localize(\n                                            'We need this to make sure our service complies with laws and regulations in your country.'\n                                        )}\n                                    </p>\n                                    <Button\n                                        className={classNames('set-residence__btn', {\n                                            'set-residence__btn--disabled':\n                                                !values.residence || errors.residence || isSubmitting,\n                                        })}\n                                        type='submit'\n                                        is_disabled={!values.residence || !!errors.residence || isSubmitting}\n                                        text={localize('Set residence')}\n                                        primary\n                                    />\n                                </ResidenceForm>\n                            </React.Fragment>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n\nSetResidence.propTypes = {\n    onSetResidence: PropTypes.func,\n    residence_list: PropTypes.array,\n};\n\nconst SetResidenceModal = ({\n    enableApp,\n    disableApp,\n    is_loading,\n    is_visible,\n    onSetResidence,\n    residence_list,\n    toggleSetResidenceModal,\n}) => {\n    if (residence_list.length < 1) return null;\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_content_centered\n        >\n            <SetResidence\n                onSetResidence={onSetResidence}\n                residence_list={residence_list}\n                isModalVisible={toggleSetResidenceModal}\n                enableApp={enableApp}\n            />\n        </Dialog>\n    );\n};\n\nSetResidenceModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    onSetResidence: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(({ ui, client }) => ({\n    is_visible: ui.is_set_residence_modal_visible,\n    toggleSetResidenceModal: ui.toggleSetResidenceModal,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_loading: ui.is_loading,\n    onSetResidence: client.onSetResidence,\n    residence_list: client.residence_list,\n}))(SetResidenceModal);\n"],"sourceRoot":""}